name: Build and Deploy Agda Documentation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Get GHC and Agda versions
        id: versions
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y ghc cabal-install
          GHC_VERSION=$(ghc --numeric-version)
          cabal update
          AGDA_VERSION=$(cabal list --simple-output agda | grep '^agda ' | head -1 | awk '{print $2}')
          echo "ghc=$GHC_VERSION" >> $GITHUB_OUTPUT
          echo "agda=$AGDA_VERSION" >> $GITHUB_OUTPUT
          echo "GHC version: $GHC_VERSION"
          echo "Latest Agda version: $AGDA_VERSION"

      - name: Cache Cabal and Agda
        id: cache-agda
        uses: actions/cache@v4
        with:
          path: |
            ~/.cabal/store
            ~/.cabal/packages
            ~/.local/bin
          key: ${{ runner.os }}-agda-${{ steps.versions.outputs.agda }}-ghc-${{ steps.versions.outputs.ghc }}
          restore-keys: |
            ${{ runner.os }}-agda-

      - name: Install Agda
        if: steps.cache-agda.outputs.cache-hit != 'true'
        run: |
          cabal install Agda
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Add Agda to PATH
        if: steps.cache-agda.outputs.cache-hit == 'true'
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Get latest Agda stdlib version
        id: stdlib-version
        run: |
          STDLIB_VERSION=$(git ls-remote --tags --refs --sort="v:refname" https://github.com/agda/agda-stdlib.git | tail -n1 | sed 's/.*\///')
          echo "version=$STDLIB_VERSION" >> $GITHUB_OUTPUT
          echo "Latest agda-stdlib version: $STDLIB_VERSION"

      - name: Cache Agda standard library
        id: cache-stdlib
        uses: actions/cache@v4
        with:
          path: ~/.agda
          key: ${{ runner.os }}-agda-stdlib-${{ steps.stdlib-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-agda-stdlib-

      - name: Install Agda standard library
        if: steps.cache-stdlib.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.agda
          cd ~/.agda
          git clone --depth 1 --branch ${{ steps.stdlib-version.outputs.version }} https://github.com/agda/agda-stdlib.git
          cd agda-stdlib
          echo "name: standard-library" > standard-library.agda-lib
          echo "include: src" >> standard-library.agda-lib
          echo "$HOME/.agda/agda-stdlib/standard-library.agda-lib" > ~/.agda/libraries
          echo "standard-library" > ~/.agda/defaults

      - name: Generate HTML documentation
        run: |
          agda --version
          agda --html --html-dir=docs --html-highlight=auto src/Everything.agda

      - name: Copy custom assets
        run: |
          if [ -d "site-assets" ]; then
            cp -r site-assets/* docs/ || true
          fi

      - name: Add Jekyll front matter to markdown files
        run: |
          chmod +x scripts/add-jekyll-frontmatter.sh
          ./scripts/add-jekyll-frontmatter.sh

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
