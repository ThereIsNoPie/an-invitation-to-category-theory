name: Build and Deploy Agda Documentation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Set PATH at job level to ensure Agda is always available
      PATH: /home/runner/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Setup GHC and Cabal
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y cabal-install ghc
          cabal update

      - name: Get Agda version for cache key
        id: versions
        run: |
          AGDA_VERSION=$(cabal list --simple-output agda | grep -E '^agda\s' | tail -1 | awk '{print $2}')
          echo "agda=$AGDA_VERSION" >> $GITHUB_OUTPUT
          echo "Using Agda version: $AGDA_VERSION"

      - name: Cache Agda installation
        id: cache-agda
        uses: actions/cache@v4
        with:
          path: |
            ~/.cabal/store
            ~/.cabal/packages
            ~/.local/bin
          key: ${{ runner.os }}-agda-${{ steps.versions.outputs.agda }}-v2
          restore-keys: |
            ${{ runner.os }}-agda-${{ steps.versions.outputs.agda }}-

      - name: Verify or install Agda
        run: |
          if [ "${{ steps.cache-agda.outputs.cache-hit }}" == "true" ]; then
            echo "Cache hit - verifying Agda installation..."
            if command -v agda &> /dev/null && agda --version &> /dev/null; then
              echo "✓ Agda successfully restored from cache"
              agda --version
            else
              echo "⚠ Cache hit but Agda not working - reinstalling..."
              cabal install Agda
            fi
          else
            echo "Cache miss - installing Agda (this takes ~20 minutes)..."
            cabal install Agda
            echo "✓ Agda installed successfully"
            agda --version
          fi

      - name: Get Agda stdlib version
        id: stdlib-version
        run: |
          STDLIB_VERSION=$(git ls-remote --tags --refs --sort="v:refname" https://github.com/agda/agda-stdlib.git | tail -n1 | sed 's/.*\///')
          echo "version=$STDLIB_VERSION" >> $GITHUB_OUTPUT
          echo "Using stdlib version: $STDLIB_VERSION"

      - name: Cache Agda standard library
        id: cache-stdlib
        uses: actions/cache@v4
        with:
          path: ~/.agda
          key: ${{ runner.os }}-agda-stdlib-${{ steps.stdlib-version.outputs.version }}-v2
          restore-keys: |
            ${{ runner.os }}-agda-stdlib-

      - name: Setup Agda standard library
        run: |
          if [ "${{ steps.cache-stdlib.outputs.cache-hit }}" == "true" ]; then
            echo "✓ Standard library restored from cache"
            # Verify the cache is valid
            if [ -f ~/.agda/libraries ] && [ -f ~/.agda/defaults ]; then
              echo "Configuration files present"
            else
              echo "⚠ Cache incomplete - regenerating config files..."
              echo "$HOME/.agda/agda-stdlib/standard-library.agda-lib" > ~/.agda/libraries
              echo "standard-library" > ~/.agda/defaults
            fi
          else
            echo "Installing Agda standard library..."
            mkdir -p ~/.agda
            cd ~/.agda
            git clone --depth 1 --branch ${{ steps.stdlib-version.outputs.version }} https://github.com/agda/agda-stdlib.git
            cd agda-stdlib
            echo "name: standard-library" > standard-library.agda-lib
            echo "include: src" >> standard-library.agda-lib
            echo "$HOME/.agda/agda-stdlib/standard-library.agda-lib" > ~/.agda/libraries
            echo "standard-library" > ~/.agda/defaults
            echo "✓ Standard library installed"
          fi

          # Display configuration for debugging
          echo "Library configuration:"
          cat ~/.agda/libraries
          cat ~/.agda/defaults

      - name: Generate HTML documentation
        run: |
          echo "Generating HTML from Agda sources..."
          agda --html --html-dir=docs --html-highlight=auto src/Everything.agda
          echo "✓ HTML documentation generated"

      - name: Copy custom assets
        run: |
          if [ -d "site-assets" ]; then
            echo "Copying custom assets..."
            cp -r site-assets/* docs/
            echo "✓ Assets copied"
          fi

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
